{"version":3,"sources":["Tmdb.js","Tmdbs.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setscrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","FeaturedMovie","firstData","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setblackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","Tmdbs","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252b5e80.chunk.js","sourcesContent":["const API_KEY = '877134b4fa07dc732a54a44470a77021';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n  const req = await fetch(`${API_BASE}${endpoint}`);\n  const json = await req.json();\n  return json;\n}\n\n const getHomeList = async () => {\n    return [\n      {\n        slug: 'originals',\n        title: 'Originais da netflix',\n        items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'trending',\n        title: 'Recomendados para você',\n        items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'toprated',\n        title: 'Em alta',\n        items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'action',\n        title: 'Ação',\n        items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'comedy',\n        title: 'Comédia',\n        items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'horror',\n        title: 'Terror',\n        items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'romance',\n        title: 'Romance',\n        items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n      },\n      {\n        slug: 'documentary',\n        title: 'Documentários',\n        items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n      },\n    ];\n};\n\nexport default getHomeList;","const API_KEY = '877134b4fa07dc732a54a44470a77021';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n  const req = await fetch(`${API_BASE}${endpoint}`);\n  const json = await req.json();\n  return json;\n}\n\nconst getMovieInfo = async (movieId, type) => {\n  let info = {};\n  if(movieId) {\n    switch(type) {\n       case 'movie':\n      info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n      break;\n      case 'tv':\n        info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n      break;\n      default:\n        info = null;\n    }\n  }\n  return info;\n};\n\nexport default getMovieInfo;","import React, { useState } from 'react';\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nfunction MovieRow ({ title, items }) {\n  const [ scrollX, setscrollX] = useState(0);\n  const handleLeftArrow = () => {\n    let x = scrollX + Math.round(window.innerWidth / 2);\n    if(x > 0) {\n      x = 0;\n    }\n    setscrollX(x);\n  }\n\n  const handleRightArrow = () => {\n    let x = scrollX - Math.round(window.innerWidth / 2);\n    let listW = items.results.length * 150;\n    if((window.innerWidth - listW) > x) {\n      x = (window.innerWidth - listW) - 60;\n    }\n\n    setscrollX(x);\n  }\n\n  return (\n    <div className=\"movieRow\">\n      <h2>{ title }</h2>\n\n      <div className=\"movieRow--left\" onClick={ handleLeftArrow }>\n        <NavigateBeforeIcon style={{fontSize: 50}} />\n      </div>\n      <div className=\"movieRow--right\" onClick={ handleRightArrow }>\n        <NavigateNextIcon style={{fontSize: 50}} />\n      </div>\n\n      <div className=\"movieRow--listarea\">\n          <div className=\"movieRow--list\" style={{\n            marginLeft: scrollX,\n            width: items.results.length * 150\n          }}>\n            { items.results.length > 0 && items.results.map((item, key) =>(\n              <div key={ key } className=\"movieRow--item\">\n                <img src={ `https://image.tmdb.org/t/p/w300${ item.poster_path }` } alt={ item.original_title } />\n              </div>\n            ))}\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieRow;\n","import React from 'react';\nimport './FeaturedMovie.css';\n\nfunction FeaturedMovie ({ item }) {\n\n  let firstData = new Date(item.first_air_date);\n\n  let genres = [];\n  for(let i in item.genres) {\n    genres.push(item.genres[i].name);\n  }\n\n  let description = item.overview;\n  if(description.length > 200) {\n    description = description.substring(0, 200)+ '...';\n  }\n\n  return (\n   <section className=\"featured\" style={{\n     backgroundSize: 'cover',\n     backgroundPosition: 'center',\n     backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\n   }}>\n    <div className=\"featured--vertical\">\n      <div className=\"featured--horizontal\">\n        <div className=\"featured--name\">\n          { item.original_name }\n        </div>\n        <div className=\"featured--info\">\n          <div className=\"featured--points\">\n            { item.vote_average } pontos\n          </div>\n          <div className=\"featured--year\">\n            { firstData.getFullYear() }\n          </div>\n          <div className=\"featured--seasons\">\n            { item.number_of_seasons } temporada{item.number_of_seasons !== 1 ? 's' : ''}\n          </div>\n        </div>\n        <div className=\"featured--description\">\n          { description }\n        </div>\n          <div className=\"featured--buttons\">\n            <a href={ `/watch/${item.id}` } className=\"featured--wathbutton\">► Assistir</a>\n            <a href={ `/list/add/${item.id}` } className=\"featured--mylistbutton\">+ Minha Lista</a>\n          </div>\n          <div className=\"featured--genres\">\n            <strong>Gêneros: </strong>\n            { genres.join(', ') }\n          </div>\n      </div>\n    </div>\n   </section>\n  );\n}\n\nexport default FeaturedMovie;","import React from 'react';\nimport './Header.css';\n\nfunction Header ({ black }) {\n  return (\n    <header className={ black ? 'black' : '' }>\n      <div className=\"header--logo\">\n        <a href=\"/\">\n        <img src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\" alt=\"Netflix\"/>\n        </a>\n      </div>\n      <div className=\"header--user\">\n        <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Usuário\"/>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport Tmdbs from './Tmdbs';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie'\nimport Header from './components/Header';\n\nfunction App () {\n  const [movieList, setMovieList] = useState([]);\n  const [ featuredData, setFeaturedData] = useState(null);\n  const [ blackHeader, setblackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb();\n      setMovieList(list);\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length -1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdbs(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setblackHeader(true);\n      } else {\n        setblackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  }, []);\n\n    return (\n    <div className=\"page\">\n      <Header black={ blackHeader } />\n\n      {  featuredData && <FeaturedMovie item={ featuredData } />}\n      <section className=\"lists\">\n        { movieList.map(({title,items}, key) =>(\n          <MovieRow key={ key } title={ title } items={ items } />\n        ))}\n      </section>\n      <footer>\n       Direitos de imagens para Netflix<br/>\n       Dados pegos do site Themoviedb.org<br/>\n       <a href=\"https://www.youtube.com/watch?v=tBweoUiMsDg&ab_channel=BoniekyLacerdaBoniekyLacerda\">\n       Tutorial no Canal do Bonieky Lacerda\n       </a>\n      </footer>\n\n      { movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://cdn.lowgif.com/small/0534e2a412eeb281-the-counterintuitive-tech-behind-netflix-s-worldwide.gif\" alt=\"loading\"></img>\n        </div>\n      }\n    </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}